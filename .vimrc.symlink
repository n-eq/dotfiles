let mapleader=','
filetype plugin on
filetype indent on

" set the runtime path to include Vundle and initialize
set rtp+=~/.vim/bundle/Vundle.vim

call plug#begin('~/.vim/plugged')
Plug 'junegunn/fzf', { 'do': { -> fzf#install() } }
Plug 'keith/parsec.vim'
Plug 'liuchengxu/space-vim-dark'
Plug 'preservim/nerdtree'
Plug 'preservim/nerdcommenter'
Plug 'rust-lang/rust.vim'
Plug 'tomasiser/vim-code-dark'
Plug 'tpope/vim-fugitive'
Plug 'ycm-core/YouCompleteMe'
Plug 'github/copilot.vim'
call plug#end()

colo space-vim-dark

filetype plugin indent on    " required

" format Rust file automatically when saving the buffer
let g:rustfmt_autosave = 1

filetype plugin indent on    " required

" highlight search by default
set hls

" Ignore these extensions when file-completing
set wildignore=*.o,*.obj,*.tar.gz,*.tgz,*.zip,*.pdf,*.sl,*.so,*.r,*.git,*.png,*.jpg,*.svg,*.doc,*.gif,*.class,*.exe,*.sw?,*.py?,*.orig,*.aux,*.toc,*.out

" enable file detection
filetype on

syntax on

" matching (, [, { /* ... etc
set showmatch
set mat=1 " how many tens of second to blink

" Write the contents of the file, if it has been modified, on each
" :next, :rewind, :last, :first, :previous, :stop, :suspend, :!, :make .. etc
set autowrite

set wrap " Wrapline

" show the current filename and path in the term title
set title

" searching starts as soon as you start typing the first letter of the word
set incsearch

syntax enable

" Indentation configuration
" set ts=2 sw=2 noexpandtab
" 4 spaces, no tab, spaces
set tabstop=4 shiftwidth=4 expandtab
" 8 spaces, no tab, spaces
" set tabstop=8 shiftwidth=8 expandtab
" 8 spaces, tab, spaces
" set tabstop=8 shiftwidth=8 noexpandtab

" Indentation configuration for vim files
autocmd FileType vim set tabstop=2 shiftwidth=2 expandtab

set ai " Autoindent
set si " Smartindent

" display line numbers
set number

" superseded by NERDCommenter
" Commenting/Uncommenting blocks of code for different file types
" souce: http://stackoverflow.com/questions/1676632/whats-a-quick-way-to-comment-uncomment-lines-in-vim#comment27973419_1676672
" autocmd FileType c,cpp,java,javascript,typescript,scala,rust,kotlin,objc,swift let b:comment_leader = '// '
" autocmd FileType sh,ruby,python,yaml                                           let b:comment_leader = '# '
" autocmd FileType conf,fstab,cmake,make,cfg,toml                                let b:comment_leader = '# '
" autocmd FileType tex,plaintex                                                  let b:comment_leader = '% '
" autocmd FileType mail                                                          let b:comment_leader = '> '
" autocmd FileType vim                                                           let b:comment_leader = '" '
" autocmd FileType sql,vhdl                                                      let b:comment_leader = '-- '
" noremap <silent> <leader>cc :<C-B>silent <C-E>s/^/<C-R>=escape(b:comment_leader,'\/')<CR>/<CR>:nohlsearch<CR>
" noremap <silent> <leader>cu :<C-B>silent <C-E>s/^\V<C-R>=escape(b:comment_leader,'\/')<CR>//e<CR>:nohlsearch<CR>
" 
" " Map <F6> to swap a comment and the following uncommented line, and vice versa
" map <expr> <F6> (getline('.') =~ b:comment_leader . "*")? ',cuj,cck' : ',ccj,cuk'

" Save a file as root (,W)
noremap <leader>W :w !sudo tee % > /dev/null<CR>

"  rot13 encoding when pressing F3, again to decrypt
map <F3> ggvGg?

" automatically closing { brace
inoremap {<CR> {<CR>}<C-o>O

" map nivgation between windows to Alt + <ArrowKey>
" source: vim.wikia.com/wiki/Switch_between_Vim_window_splits_easily
nmap <silent> <A-Up> :wincmd k<CR>
nmap <silent> <A-Down> :wincmd j<CR>
nmap <silent> <A-Left> :wincmd h<CR>
nmap <silent> <A-Right> :wincmd l<CR>

hi statusline guibg=Black ctermfg=8 guifg=White ctermbg=15
set statusline=%#Title#%F%#StatusLine#                                    " file name
set statusline+=%#MatchParen#\ \ [%{&ff}]%#MatchParen#                    " file format
set statusline+=%y                                                        " filetype
set statusline+=%h                                                        " help file flag
set statusline+=%m                                                        " modified flag
set statusline+=%r                                                        " read only flag
" set statusline+=\ %#ErrorMsg#%{GitBranchInfoString()}%#ErrorMsg#%#Title#  " Git branch
set statusline+=\ %=                                                      " align left
set statusline+=
set statusline+=Line:%l/%L[%p%%]                                          " line X of Y [percent of file]
set statusline+=\ Col:%c                                                  " current column
set laststatus=2

" Source the vimrc file after saving it
autocmd BufWritePost $MYVIMRC source $MYVIMRC

" force bash_* config files as shell
autocmd BufNewFile,BufReadPost,BufRead .bash_* set filetype=sh

set undofile
set undodir=~/.vim/undodir

" autotag??
let g:ctags_path="~/.vim/plugin"
let g:ctags_statusline=1

" Adapted from Damian Conway's vimrc file: https://github.com/thoughtstream/Damian-Conway-s-Vim-Setup/blob/master/.vimrc
" ====[ Show when lines extend past column 80]=================================>-<=====================
highlight ColorColumn ctermfg=208 ctermbg=Black
function! MarkMargin (on)
	" Black list: Don't put the 80 column marker for these filetypes,
	" no more used, manually toggled when needed ;)
	" if &ft =~ 'tex\|markdown\|vim'
	" 	return
	" endif
	if exists('b:MarkMargin')
		try
			call matchdelete(b:MarkMargin)
		catch /./
		endtry
		unlet b:MarkMargin
	endif
	if a:on
		let b:MarkMargin = matchadd('ColorColumn', '\%80v\s*\S', 100)
	endif
endfunction
augroup MarkMargin
	autocmd!
	autocmd  BufEnter  *       :call MarkMargin(0)
	autocmd  BufEnter  *.vp*   :call MarkMargin(1)
augroup END

" manually toggle margin for the current script
let s:mode = 0
function! ToggleMargin()
	let s:mode = s:mode > 0 ? 0 : 1
	call MarkMargin(s:mode)
 	echo s:mode > 0 ? "Margin on" : "Margin off"
endfunction

" map F8 to toggle margin
nmap <silent> <F8> :call ToggleMargin()<CR>
imap <silent> <F8> <ESC>:call ToggleMargin()<CR>a
"===============================>-<=====================

" Quick global substitution, use: SX/Y<CR>
nmap S :%s//g<LEFT><LEFT>

" Load local .vimrc, if existing
set exrc

" TeX quick mappings
autocmd FileType tex inoremap <C-i> \emph{}<esc>i
autocmd FileType tex inoremap <C-b> \textbf{}<esc>i
autocmd FileType tex inoremap << \og
autocmd FileType tex inoremap >> \fg{}
autocmd FileType tex inoremap <silent> <F9> \verb??<ESC>hi

" Return to the same line when you re-open a file, credits to Steve Losh (to Amit, in fact)
augroup line_return
	au!
	au BufReadPost *
				\ if line("'\"") > 0 && line("'\"") <= line("$") |
				\     execute 'normal! g`"zvzz' |
				\ endif
augroup END

" map ,sc to 'source code quote' the current word/expression
" Known pitfalls: words containing dots
autocmd FileType markdown nnoremap <leader>sc ciw``<Esc>P
autocmd FileType gitcommit nnoremap <leader>sc ciw``<Esc>P
autocmd FileType markdown xnoremap <leader>sc c``<Esc>P
" force *.md files as markdown
autocmd BufNewFile,BufReadPost,BufRead *.md,*.markdown set filetype=markdown

" map Ctrl-S to save the file in insert mode
imap <C-S> <ESC>:w<CR>a
" Consequently... (see https://vi.stackexchange.com/a/2425)
silent !stty -ixon
" Restore default behaviour when leaving Vim
autocmd VimLeave * silent !ssty ixon

" show current function name (useful in C/C++ programs), credits to https://stackoverflow.com/a/23259759
" /!\ fails in the following cases:
"  * function name in more than one line
"  * function defined inside a class definition
fun! ShowFuncName()
	let lnum = line(".")
	let col = col(".")
	echohl ModeMsg
	echo getline(search("^[^ \t#/]\\{2}.*[^:]\s*$", 'bW'))
	echohl None
	call search("\\%" . lnum . "l" . "\\%" . col . "c")
endfun
" autocmd FileType c,cpp nnoremap <leader>f :call ShowFuncName() <CR>

" map <F7> to disable search highlighting
nnoremap <F7> :noh<CR>
inoremap <F7> <ESC>:noh<CR>i

" automatically load 'plausible' tag files
set tags=./tags,tags,./.git/tags
" map ,] to open tag in new tab
nnoremap <leader>] <C-w><C-]><C-w>T
" for some reason on Mac ctrl-] doesn't work, so I had to remap this binding
" nnoremap <leader>ti <C-]>
" autocmd FileType c,cpp nnoremap <leader>ti <C-]>
nnoremap <leader>tu <C-T>

nnoremap <leader>ti :YcmCompleter GoTo<CR>
nnoremap <leader>f :YcmCompleter FixIt<CR>
nmap <leader>tu <C-o>

" insert a shebang at the top of shell files
autocmd FileType sh nnoremap <F12> ggO#!/bin/sh<CR><ESC>

" map '-' in normal mode to explore current dir
nnoremap - :NERDTreeFind<CR>:NERDTreeRefreshRoot<CR>
nnoremap ,, :NERDTreeClose<CR>
" Remapped to toggle NERDTree
" nnoremap - :Explore<CR>

command! -nargs=+ Grep execute 'silent grep! --exclude-dir=.git -RIni <args> *' | copen

" map C-J to insert a new line after the current word and return back,
" very useful when formatting a text to respect the 80-col rule
" credits to: http://vim.wikia.com/wiki/Insert_newline_without_entering_insert_mode
nnoremap <C-J> ea<CR><Esc>k$

" :Vrc command to open ~/.vimrc in a split window
command! -nargs=0 Vrc :sp ~/.vimrc

let g:indentLine_enabled = 0
autocmd FileType python let g:indentLine_enabled = 1

" automatically insert "#ifndef..." in new h,hpp files
" (http://vim.wikia.com/wiki/Automatic_insertion_of_C/C%2B%2B_header_gates)
function! s:insert_gates()
  let gatename = "__" . substitute(toupper(expand("%:t")), "\\.", "_", "g") . "__"
  execute "normal! i#ifndef " . gatename
  execute "normal! o#define " . gatename . " "
  execute "normal! Go#endif"
  execute "normal! ggjo"
endfunction
autocmd BufNewFile *.{h,hpp} call <SID>insert_gates()

nnoremap <F5> :buffers<CR>:buffer<space>
set title titlestring=

set backspace=eol,indent,start

" youcompleteme
set encoding=utf-8

" Map <leader>rg to "search" word under cursor, see
nmap <leader>rg :Rg <C-R><C-W><CR>
" Map <leader>ff to list files
nmap <leader>ff :Files <CR>

nnoremap <leader>ti :YcmCompleter GoToDefinitionElseDeclaration<CR>
nnoremap <leader>f  :YcmCompleter FixIt<CR>
nnoremap <leader>rn :YcmCompleter RefactorRename<space>

" rust.vim plugin: apply rustmt upon file save
let g:rustfmt_autosave = 1

" NERDTree bindings
" close automatically when open a file for editing
" let NERDTreeQuitOnOpen=1
" Start NERDTree when Vim is started without file arguments.
autocmd StdinReadPre * let s:std_in=1
autocmd VimEnter * if argc() == 0 && !exists('s:std_in') | NERDTree | endif
" Start NERDTree when Vim starts with a directory argument.
autocmd VimEnter * if argc() == 1 && isdirectory(argv()[0]) && !exists('s:std_in') |
    \ execute 'NERDTree' argv()[0] | wincmd p | enew | execute 'cd '.argv()[0] | endif
" If another buffer tries to replace NERDTree, put it in the other window, and bring back NERDTree.
autocmd BufEnter * if bufname('#') =~ 'NERD_tree_\d\+' && bufname('%') !~ 'NERD_tree_\d\+' && winnr('$') > 1 |
    \ let buf=bufnr() | buffer# | execute "normal! \<C-W>w" | execute 'buffer'.buf | endif
" Open the existing NERDTree on each new tab (commented, maybe we need to
" ensure this is only applied on 'real' tabs)
" autocmd BufWinEnter * silent NERDTreeMirror

" sync NERDTree base directory with the current open buffer, see https://superuser.com/a/195191
" autocmd BufEnter * lcd %:p:h

" Map ,, to NERDTreeToggle
nmap <leader><leader> :NERDTreeToggle<CR>

" YouCompleteMe, autoclose preview window (with function doc) after leaving insertion mode
let g:ycm_autoclose_preview_window_after_insertion = 1

" Tagbar for Rust (using universable ctags variant)
let g:rust_use_custom_ctags_defs = 1  " if using rust.vim
let g:tagbar_type_rust = {
  \ 'ctagsbin' : '/usr/bin/ctags',
  \ 'ctagstype' : 'rust',
  \ 'kinds' : [
      \ 'n:modules',
      \ 's:structures:1',
      \ 'i:interfaces',
      \ 'c:implementations',
      \ 'f:functions:1',
      \ 'g:enumerations:1',
      \ 't:type aliases:1:0',
      \ 'v:constants:1:0',
      \ 'M:macros:1',
      \ 'm:fields:1:0',
      \ 'e:enum variants:1:0',
      \ 'P:methods:1',
  \ ],
  \ 'sro': '::',
  \ 'kind2scope' : {
      \ 'n': 'module',
      \ 's': 'struct',
      \ 'i': 'interface',
      \ 'c': 'implementation',
      \ 'f': 'function',
      \ 'g': 'enum',
      \ 't': 'typedef',
      \ 'v': 'variable',
      \ 'M': 'macro',
      \ 'm': 'field',
      \ 'e': 'enumerator',
      \ 'P': 'method',
  \ },
\ }

" add a definition for Objective-C to tagbar
let g:tagbar_type_objc = {
    \ 'ctagstype' : 'ObjectiveC',
    \ 'kinds'     : [
        \ 'i:interface',
        \ 'I:implementation',
        \ 'p:Protocol',
        \ 'm:Object_method',
        \ 'c:Class_method',
        \ 'v:Global_variable',
        \ 'F:Object field',
        \ 'f:function',
        \ 'p:property',
        \ 't:type_alias',
        \ 's:type_structure',
        \ 'e:enumeration',
        \ 'M:preprocessor_macro',
    \ ],
    \ 'sro'        : ' ',
    \ 'kind2scope' : {
        \ 'i' : 'interface',
        \ 'I' : 'implementation',
        \ 'p' : 'Protocol',
        \ 's' : 'type_structure',
        \ 'e' : 'enumeration'
    \ },
    \ 'scope2kind' : {
        \ 'interface'      : 'i',
        \ 'implementation' : 'I',
        \ 'Protocol'       : 'p',
        \ 'type_structure' : 's',
        \ 'enumeration'    : 'e'
    \ }
\ }

""""""""
" fzf personal mappings
""""""""
" ,rg to search (rg) the word under the cursor
nnoremap <silent> <Leader>rg :Rg <C-R><C-W><CR>

" remap arrow keys to nop, force the use of hjkl
noremap <Up> <nop>
noremap <Down> <nop>
noremap <Left> <nop>
noremap <Right> <nop>

inoremap <Up> <nop>
inoremap <Down> <nop>
inoremap <Left> <nop>
inoremap <Right> <nop>

nnoremap <leader>b :Buffers <CR>


" Load this custom config file
let g:ycm_global_ycm_extra_conf = '~/.ycm_extra_conf.py'
" Disable prompting for extra conf confirmation each time
let g:ycm_confirm_extra_conf = 0


" non space unicode chars: https://unix.stackexchange.com/a/263941
set conceallevel=1
syn match NBSP '\%xa0' conceal cchar=␣
syn match NarrowNBSP '\%u202F' conceal cchar=⸤

" FZF: switch to window if buffer already open somewhere!
let g:fzf_buffers_jump = 1

" auto-replace annoying non-breaking spaces that sometimes get inserted
" silently instead of real spaces (:set list doesn't show them!)
" source: https://vi.stackexchange.com/a/12011
augroup RemoveSpaces
  autocmd!
  autocmd BufWritePre * silent! :%s/\%u00A0/ /g
augroup end


" call clang-format on save for C/C++ files if a .clang-format file is present
" credits: https://vi.stackexchange.com/a/22985
function ClangFormatBuffer()
  if &modified && !empty(findfile('.clang-format', expand('%:p:h') . ';'))
    let cursor_pos = getpos('.')
    :%!clang-format
    call setpos('.', cursor_pos)
  endif
endfunction
autocmd BufWritePre *.h,*.hpp,*.c,*.cpp :call ClangFormatBuffer()

" NERDCommenter settings
let g:NERDCreateDefaultMappings = 1
" Add spaces after comment delimiters by default
let g:NERDSpaceDelims = 1
" Align line-wise comment delimiters flush left instead of following code indentation
let g:NERDDefaultAlign = 'left'
" Allow commenting and inverting empty lines (useful when commenting a region)
let g:NERDCommentEmptyLines = 1
" Set a language to use its alternate delimiters by default
let g:NERDAltDelims_c = 1
" Enable trimming of trailing whitespace when uncommenting
let g:NERDTrimTrailingWhitespace = 1
" Enable NERDCommenterToggle to check all selected lines is commented or not 
let g:NERDToggleCheckAllLines = 1

let g:copilot_no_startup_warnings = v:true

set shortmess-=S
